{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanvi\\\\Desktop\\\\BlogProject\\\\blog-mern\\\\client\\\\src\\\\pages\\\\CreatePost.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useNavigate, useParams } from 'react-router-dom';\n\n// export default function CreatePost() {\n//   const { id } = useParams();\n//   const isEdit = Boolean(id);\n//   const [title, setTitle]       = useState('');\n//   const [content, setContent]   = useState('');\n//   const [category, setCategory] = useState('');\n//   const [status, setStatus]     = useState('draft');\n//   const [image, setImage]       = useState(null);\n//   const navigate = useNavigate();\n\n//   // Predefined categories\n//   const predefinedCategories = [\n//     'Technology',\n//     'Lifestyle',\n//     'Education',\n//     'Finance'\n//   ];\n\n//   // If editing, load the existing post\n//   useEffect(() => {\n//     if (isEdit) {\n//       const token = localStorage.getItem('token');\n//       axios.get(`http://localhost:5001/api/____fill in___`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       })\n//       .then(res => {\n//         const post = res.data.find(p => p._id === id);\n//         if (post) {\n//           setTitle(post.title);\n//           setContent(post.content);\n//           setCategory(post.category);\n//           setStatus(post.status);\n//         }\n//       })\n//       .catch(console.error);\n//     }\n//   }, [isEdit, id]);\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n//     const token = localStorage.getItem('token');\n//     //const formData = new FormData();\n//     formData.append('title', title);\n//     formData.append('content', content);\n//     formData.append('category', category);\n//     formData.append('status', status);\n//     if (image) formData.append('image', image);\n\n//     try {\n//       const url    = isEdit\n//         ? `http://localhost:5001/api/posts/${id}`\n//         : 'http://localhost:5001/api/posts';\n//       const method = isEdit ? 'put' : 'post';\n//       await axios[method](url, formData, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       navigate('/');\n//     } catch (err) {\n//       alert(err?.response?.data?.error || 'Submission failed');\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\n//       <h2>{isEdit ? 'Edit Post' : 'New Post'}</h2>\n\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Title</label>\n//         <input\n//           className=\"form-control\"\n//           value={title}\n//           onChange={e => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Content</label>\n//         <textarea\n//           className=\"form-control\"\n//           rows={4}\n//           value={content}\n//           onChange={e => setContent(e.target.value)}\n//           required\n//         />\n//       </div>\n\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Category</label>\n//         <select\n//           className=\"form-select\"\n//           value={category}\n//           onChange={e => setCategory(e.target.value)}\n//           required\n//         >\n//           <option value=\"\">-- Select Category --</option>\n//           {predefinedCategories.map(cat => (\n//             <option key={cat} value={cat}>{cat}</option>\n//           ))}\n//         </select>\n//       </div>\n\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Status</label>\n//         <select\n//           className=\"form-select\"\n//           value={status}\n//           onChange={e => setStatus(e.target.value)}\n//         >\n//           <option value=\"draft\">Draft</option>\n//           <option value=\"published\">Published</option>\n//         </select>\n//       </div>\n\n//       <div className=\"mb-3\">\n//         <label className=\"form-label\">Image (optional)</label>\n//         <input\n//           type=\"file\"\n//           className=\"form-control\"\n//           accept=\"image/*\"\n//           onChange={e => setImage(e.target.files[0])}\n//         />\n//       </div>\n\n//       <button type=\"submit\" className=\"btn btn-primary\">\n//         {isEdit ? 'Update' : 'Submit'}\n//       </button>\n//     </form>\n//   );\n// }\n\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostForm({\n  isEdit,\n  id\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [category, setCategory] = useState('');\n  const [status, setStatus] = useState('');\n  const [image, setImage] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    const formData = new FormData(); // ✅ Define properly\n\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('category', category);\n    formData.append('status', status);\n    if (image) {\n      formData.append('image', image);\n    }\n    try {\n      const url = isEdit ? `http://localhost:5001/api/posts/${id}` // ✅ Update URL for edit\n      : 'http://localhost:5001/api/posts'; // ✅ Create URL\n\n      const method = isEdit ? 'put' : 'post';\n      await axios[method](url, formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('Post submitted successfully!');\n      navigate('/');\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      alert((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Submission failed!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: content,\n      onChange: e => setContent(e.target.value),\n      placeholder: \"Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: category,\n      onChange: e => setCategory(e.target.value),\n      placeholder: \"Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: status,\n      onChange: e => setStatus(e.target.value),\n      placeholder: \"Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setImage(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: isEdit ? 'Update Post' : 'Create Post'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n_s(PostForm, \"SGOH6qG5Rc0x2BqDw7DNDsZPDlE=\", false, function () {\n  return [useNavigate];\n});\n_c = PostForm;\nexport default PostForm;\nvar _c;\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["axios","useNavigate","useState","jsxDEV","_jsxDEV","PostForm","isEdit","id","_s","navigate","title","setTitle","content","setContent","category","setCategory","status","setStatus","image","setImage","handleSubmit","e","preventDefault","token","localStorage","getItem","formData","FormData","append","url","method","headers","Authorization","alert","err","_err$response","_err$response$data","console","error","response","data","onSubmit","children","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","files","_c","$RefreshReg$"],"sources":["C:/Users/sanvi/Desktop/BlogProject/blog-mern/client/src/pages/CreatePost.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n\r\n// export default function CreatePost() {\r\n//   const { id } = useParams();\r\n//   const isEdit = Boolean(id);\r\n//   const [title, setTitle]       = useState('');\r\n//   const [content, setContent]   = useState('');\r\n//   const [category, setCategory] = useState('');\r\n//   const [status, setStatus]     = useState('draft');\r\n//   const [image, setImage]       = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n//   // Predefined categories\r\n//   const predefinedCategories = [\r\n//     'Technology',\r\n//     'Lifestyle',\r\n//     'Education',\r\n//     'Finance'\r\n//   ];\r\n\r\n//   // If editing, load the existing post\r\n//   useEffect(() => {\r\n//     if (isEdit) {\r\n//       const token = localStorage.getItem('token');\r\n//       axios.get(`http://localhost:5001/api/____fill in___`, {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       })\r\n//       .then(res => {\r\n//         const post = res.data.find(p => p._id === id);\r\n//         if (post) {\r\n//           setTitle(post.title);\r\n//           setContent(post.content);\r\n//           setCategory(post.category);\r\n//           setStatus(post.status);\r\n//         }\r\n//       })\r\n//       .catch(console.error);\r\n//     }\r\n//   }, [isEdit, id]);\r\n\r\n//   const handleSubmit = async e => {\r\n//     e.preventDefault();\r\n//     const token = localStorage.getItem('token');\r\n//     //const formData = new FormData();\r\n//     formData.append('title', title);\r\n//     formData.append('content', content);\r\n//     formData.append('category', category);\r\n//     formData.append('status', status);\r\n//     if (image) formData.append('image', image);\r\n\r\n//     try {\r\n//       const url    = isEdit\r\n//         ? `http://localhost:5001/api/posts/${id}`\r\n//         : 'http://localhost:5001/api/posts';\r\n//       const method = isEdit ? 'put' : 'post';\r\n//       await axios[method](url, formData, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           'Content-Type': 'multipart/form-data'\r\n//         }\r\n//       });\r\n//       navigate('/');\r\n//     } catch (err) {\r\n//       alert(err?.response?.data?.error || 'Submission failed');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n//       <h2>{isEdit ? 'Edit Post' : 'New Post'}</h2>\r\n\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Title</label>\r\n//         <input\r\n//           className=\"form-control\"\r\n//           value={title}\r\n//           onChange={e => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n//       </div>\r\n\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Content</label>\r\n//         <textarea\r\n//           className=\"form-control\"\r\n//           rows={4}\r\n//           value={content}\r\n//           onChange={e => setContent(e.target.value)}\r\n//           required\r\n//         />\r\n//       </div>\r\n\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Category</label>\r\n//         <select\r\n//           className=\"form-select\"\r\n//           value={category}\r\n//           onChange={e => setCategory(e.target.value)}\r\n//           required\r\n//         >\r\n//           <option value=\"\">-- Select Category --</option>\r\n//           {predefinedCategories.map(cat => (\r\n//             <option key={cat} value={cat}>{cat}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Status</label>\r\n//         <select\r\n//           className=\"form-select\"\r\n//           value={status}\r\n//           onChange={e => setStatus(e.target.value)}\r\n//         >\r\n//           <option value=\"draft\">Draft</option>\r\n//           <option value=\"published\">Published</option>\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div className=\"mb-3\">\r\n//         <label className=\"form-label\">Image (optional)</label>\r\n//         <input\r\n//           type=\"file\"\r\n//           className=\"form-control\"\r\n//           accept=\"image/*\"\r\n//           onChange={e => setImage(e.target.files[0])}\r\n//         />\r\n//       </div>\r\n\r\n//       <button type=\"submit\" className=\"btn btn-primary\">\r\n//         {isEdit ? 'Update' : 'Submit'}\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// }\r\n\r\n\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\n\r\nfunction PostForm({ isEdit, id }) {\r\n  const navigate = useNavigate();\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [image, setImage] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const token = localStorage.getItem('token');\r\n    const formData = new FormData();  // ✅ Define properly\r\n\r\n    formData.append('title', title);\r\n    formData.append('content', content);\r\n    formData.append('category', category);\r\n    formData.append('status', status);\r\n    if (image) {\r\n      formData.append('image', image);\r\n    }\r\n\r\n    try {\r\n      const url = isEdit\r\n        ? `http://localhost:5001/api/posts/${id}`    // ✅ Update URL for edit\r\n        : 'http://localhost:5001/api/posts';         // ✅ Create URL\r\n\r\n      const method = isEdit ? 'put' : 'post';\r\n\r\n      await axios[method](url, formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      alert('Post submitted successfully!');\r\n      navigate('/');\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err?.response?.data?.error || 'Submission failed!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"Title\" />\r\n      <textarea value={content} onChange={(e) => setContent(e.target.value)} placeholder=\"Content\"></textarea>\r\n      <input type=\"text\" value={category} onChange={(e) => setCategory(e.target.value)} placeholder=\"Category\" />\r\n      <input type=\"text\" value={status} onChange={(e) => setStatus(e.target.value)} placeholder=\"Status\" />\r\n      <input type=\"file\" onChange={(e) => setImage(e.target.files[0])} />\r\n      <button type=\"submit\">{isEdit ? 'Update Post' : 'Create Post'}</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default PostForm;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,QAAQA,CAAC;EAAEC,MAAM;EAAEC;AAAG,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMkB,YAAY,GAAG,MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}